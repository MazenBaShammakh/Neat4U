#include <iostream>
#include <iomanip>
#pragma once
using namespace std;

//declaration of struct appointment
struct appointment
{
	int aptId;
	string name;
	string phoneNo;
	string email;
	string address;
	string date;
	char type;
	int cleaners;
	float duration;
	double price;
	char gender;
};

extern int availableCln;

void newAppointment(appointment *app, int j)
{
     cout << "------------------New Appointment-------------------\n\n";
     //apptId generated by adding 1, starting from 101
    if(j == 0)
         (app+j)->aptId = 101;
    else
         (app+j)->aptId = (app+(j-1))->aptId + 1;
    
    //enter name
	cout << "Name: ";
	cin.ignore();
	getline(cin,(app+j)->name);

	//enter phoneNo
	cout << "Phone No: ";
	getline(cin,(app+j)->phoneNo);

	//enter email
	cout << "Email: ";
	getline(cin,(app+j)->email);

	//enter address
	cout << "Address: ";
	getline(cin,(app+j)->address); 

	//enter date
	cout << "Date for Service (dd/mm/yy): ";
	getline(cin,(app+j)->date);

	//enter number of cleaners needed
	cout <<"Number of Cleaner Needed: ";
	cin >> (app+j)->cleaners;
	//check availibility of cleaners
	while((app+j)->cleaners > availableCln || (app+j)->cleaners <= 0)
	{
        //re-enter available number of cleaners
        cout << "Insufficient Number of Cleaners. Re-enter: ";
    	   cin >> (app+j)->cleaners;
     }
     //reduce number of cleaners by number of booked cleaners by this appointment
	availableCln -= (app+j)->cleaners;

    //enter type of service
	cout <<"Type of Service: ";
	cin >> 	(app+j)->type;
	while((app+j)->type !='l'&& (app+j)->type !='L'  &&  (app+j)->type != 'M' && (app+j)->type !='m' && (app+j)->type !='H' && (app+j)->type !='h')
	{
		cout << "Invalid Input! Re-enter: ";
		cin >> (app+j)->type;
	}
	//ignore the enter key when pressed
	cin.clear();
	cin.ignore(1,'\0');
	
     //enter number of hours needed
	cout << "Number of Hour Needed (1-8): ";
	cin >> (app+j)->duration;
	//validate number of hours
	while((app+j)->duration > 8 || (app+j)->duration <= 0)
	{
		cout << "Invalid Input! Re-enter (1-8): ";
		cin >> (app+j)->duration;
	}
	
     //enter gender
	cout << "Gender -will not be charge- (M/F): ";
	cin >> (app+j)->gender;
	//validate gender
     while((app+j)->gender !='M'&& (app+j)->gender !='m'  &&  (app+j)->gender != 'F' && (app+j)->gender !='f')
	{
		cout << "Invalid Input! Re-enter (M/F): ";
		cin >> (app+j)->gender;
	}
	
	//printing appointment ID for user
     cout << "\nUse the following ID to track your appointment: "
	     << (app+j)->aptId
          << "\n\n--------------------Thank You-----------------------\n\n\n";
}   

void prices(int cln)
{
     cout << "\n--------------------Price List----------------------\n\n";
     cout << "| Cleaners available: " << availableCln << endl;
     cout << "| Price per cleaner: RM 10\n";
     cout << "|\n";
     cout << "| Price for Type of Cleaning:\n"
          << "|\n";
     cout << "|\tLight\tMedium\tHeavy\n"
          << "|\t L/l \t M/m  \t H/h \n";
     cout << "|\tRM 15\tRM 25\tRM 40\n"
          << "|\n";
     cout << "| Price for hours needed:\n"
          << "|\n";	
     cout << "|\t1-2 hour\t>2 hour\n";
     cout << "|\tRM 20\t\tRM 18\n\n";
     }
